df <- df %>% drop_na()
df
normalize_loudness <- function(tb) {
loudness_min <- min(tb$loudness)
loudness_max <- max(tb$loudness)
loudness_range <- loudness_max - loudness_min
tb_return <- tb
tb_return$loudness <- (tb$loudness - loudness_min)/loudness_range
return(tb_return)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
tail(df)
plot_column(df, 'loudness')
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8, vjust=1),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
plot_column(df, 'loudness')
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(aes(x = value), size = 1.2, col = alpha('grey', 0.2))+
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
install.packages("beeswarm")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(viridis)
library(lubridate)
library(beeswarm)
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
beeswarm(value ~ genre, data=tb,col=genre,pch = 19) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
for (col in feature_names) {
plot_column(df, col)
}
for (col in feature_names) {
plot_column(df, col)
}
df <- read.csv("data/music genre data.csv", header=TRUE)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(viridis)
library(lubridate)
library(beeswarm)
df <- read.csv("data/music genre data.csv", header=TRUE)
df <- df %>% drop_na()
df
col_names <- colnames(df)
col_names
feature_names <- c(col_names[3:6], col_names[8:11])
feature_names
normalize_loudness <- function(tb) {
loudness_min <- min(tb$loudness)
loudness_max <- max(tb$loudness)
loudness_range <- loudness_max - loudness_min
tb_return <- tb
tb_return$loudness <- (tb$loudness - loudness_min)/loudness_range
return(tb_return)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
beeswarm(value ~ genre, data=tb,col=genre,pch = 19) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
beeswarm(col='grey') +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_beeswarm(col='grey') +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
install.packages("ggbeeswarm")
library(tidyverse)
library(ggplot2)
library(dplyr)
library(tidyr)
library(forcats)
library(hrbrthemes)
library(viridis)
library(lubridate)
library(ggbeeswarm)
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
df_sample <- df[sample(nrow(df), 200), ]
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_beeswarm(data=df_sample, col='grey', alpha = 0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
df_sample <- df[sample(nrow(df), 200), ]
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_beeswarm(data=df_sample, x=genre, y=value, col='grey', alpha = 0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
df_sample <- df[sample(nrow(df), 200), ]
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_beeswarm(data=df_sample, x=genre, y=value, fill=genre, col='grey', alpha = 0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
df_sample <- df[sample(nrow(df), 200), ]
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
df_sample <- df[sample(nrow(df), 200), ]
p <- tb %>%
ggplot( aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(data=df_sample, position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
tb_sample <- tb[sample(nrow(df), 200), ]
p <- ggplot(data=tb, aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(data=tb_sample, aes(x=genre, y=value, fill=genre),
position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
tb_sample <- tb[sample(nrow(df), 200), ]
tb_genre <- tb_sample$Genre
tb_value <- tb_sample[,numerical_column]
p <- ggplot(data=tb, aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(data=tb_sample, aes(x=tb_genre, y=tb_value, fill=tb_genre),
position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.4) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
tb_sample <- tb[sample(nrow(df), 200), ]
tb_genre <- tb_sample$Genre
tb_value <- tb_sample[,numerical_column]
p <- ggplot(data=tb, aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(data=tb_sample, aes(x=tb_genre, y=tb_value, fill=tb_genre),
position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.65) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
plot_column <- function(tb, numerical_column) {
genre <- tb$Genre
if (numerical_column == 'loudness') {
value <- normalize_loudness(tb)[,numerical_column]
} else {
value <- tb[,numerical_column]
}
tb_sample <- tb[sample(nrow(df), 500), ]
tb_genre <- tb_sample$Genre
tb_value <- tb_sample[,numerical_column]
p <- ggplot(data=tb, aes(x=genre, y=value, fill=genre, color=genre)) +
geom_violin(width=2.1, size=0.2) +
geom_point(data=tb_sample, aes(x=tb_genre, y=tb_value, fill=tb_genre),
position = position_jitter(seed = 1, width = 0.2), color='grey', alpha=0.65) +
scale_fill_viridis(discrete=TRUE) +
scale_color_viridis(discrete=TRUE) +
theme_ipsum() +
theme(
legend.position="none",
axis.text.x = element_text(angle = 30, hjust=0.8),
axis.title.x = element_text(size = 12, hjust=0.45)
) +
xlab("Music Genres") +
ylab("Distribution") +
ggtitle(paste("Genre Value Distribution for Value: ", numerical_column))
print(p)
}
for (col in feature_names) {
plot_column(df, col)
}
for (col in feature_names) {
plot_column(df, col)
}
